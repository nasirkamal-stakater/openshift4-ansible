---
- name: fetch installer
  get_url:
    url: https://mirror.openshift.com/pub/openshift-v4/clients/ocp/{{ ocp_version }}/openshift-install-linux-{{ ocp_version }}.tar.gz
    dest: /var/tmp/openshift-install-linux-{{ ocp_version }}.tar.gz
  environment:
    http_proxy: http://serviceproxy.com.acme.com:8100
    https_proxy: http://serviceproxy.com.acme.com:8100
- name: fetch clients
  get_url:
    url: https://mirror.openshift.com/pub/openshift-v4/clients/ocp/{{ ocp_version }}/openshift-client-linux-{{ ocp_version }}.tar.gz
    dest: /var/tmp/openshift-client-linux-{{ ocp_version }}.tar.gz
  environment:
    http_proxy: http://serviceproxy.com.acme.com:8100
    https_proxy: http://serviceproxy.com.acme.com:8100

- name: extract installer
  become: true
  unarchive:
    src: /var/tmp/openshift-install-linux-{{ ocp_version }}.tar.gz
    dest: /usr/local/bin
    mode: +x
    remote_src: yes

- name: extract clients
  become: true
  unarchive:
    src: /var/tmp/openshift-client-linux-{{ ocp_version }}.tar.gz
    dest: /usr/local/bin
    mode: +x
    remote_src: yes

- name: Create temp folder
  file:
    path: "{{ temp_dir }}"
    state: directory

- name: Copy install-config.yaml
  template:
    src: templates/install-config.j2
    dest: "{{ temp_dir}}/install-config.yaml"


- name: Create manifests
  command: "/usr/local/bin/openshift-install create manifests --dir={{ temp_dir }}"

- name: patch manifests
  block:
    - name: Make masters unscheduleable
      lineinfile:
        path: "{{ temp_dir }}/manifests/cluster-scheduler-02-config.yml"
        regexp: '(^\s\smastersSchedulable: )(true)$'
        line: '\1false'
        backrefs: true
        state: present

- name: Create ignition files
  command: "/usr/local/bin/openshift-install create ignition-configs --dir={{ temp_dir }}"

- name: Create append-bootstrap.ign
  template:
    src: templates/append-bootstrap.j2
    dest: "{{ temp_dir }}/append-bootstrap.ign"

- name: create folder on jumpbox/bastion
  become: true
#  remote_user: root
  
  file:
    path: "/var/www/html/pub/{{ env_name }}"
    state: directory
    owner: root
    group: root
    mode: "0755"
  delegate_to: "{{ inventory_hostname }}"

- name: copy bootstrap.ign to webserver
  become: true
#  remote_user: root
  copy:
    src: "{{ temp_dir }}/bootstrap.ign"
    dest: "/var/www/html/pub/{{ env_name }}/bootstrap.ign"
    owner: root
    group: root
    mode: 0644
    remote_src: yes
  delegate_to: "{{ inventory_hostname }}"

- name: ensure backup folder exists
  become: true
  file:
    path: "{{ backup_path }}/{{ env_name }}/"
    state: directory

- name: copy files as a backup
  become: true
  synchronize:
    src: "{{ temp_dir }}/"
    dest: "{{ backup_path }}/{{ env_name }}/"
  delegate_to: "{{ inventory_hostname }}"
